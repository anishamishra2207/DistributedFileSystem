import os
import shutil

class FileManager:
    def __init__(self, root_directory):
        self.root_directory = root_directory
        # Create the root directory if it doesn't exist
        if not os.path.exists(self.root_directory):
            os.makedirs(self.root_directory)
    
    # --- Directory Management ---
    def create_directory(self, directory_name):
        dir_path = os.path.join(self.root_directory, directory_name)
        if not os.path.exists(dir_path):
            os.makedirs(dir_path)
            print(f"Directory '{directory_name}' created under '{self.root_directory}'.")
        else:
            print(f"Directory '{directory_name}' already exists.")
    
    def list_directories(self):
        # List only directories inside the root_directory
        dirs = [d for d in os.listdir(self.root_directory)
                if os.path.isdir(os.path.join(self.root_directory, d))]
        print(f"Directories in '{self.root_directory}': {dirs}")
        return dirs
    
    def delete_directory(self, directory_name):
        dir_path = os.path.join(self.root_directory, directory_name)
        if os.path.exists(dir_path) and os.path.isdir(dir_path):
            shutil.rmtree(dir_path)
            print(f"Directory '{directory_name}' deleted from '{self.root_directory}'.")
        else:
            print(f"Directory '{directory_name}' does not exist.")
    
    # --- File Management ---
    def create_file(self, directory, filename, content=""):
        # If a directory is provided, use it; otherwise, use the root directory
        dir_path = os.path.join(self.root_directory, directory) if directory else self.root_directory
        if not os.path.exists(dir_path):
            os.makedirs(dir_path)
        filepath = os.path.join(dir_path, filename)
        with open(filepath, 'w') as f:
            f.write(content)
        print(f"File '{filename}' created in '{dir_path}'.")
    
    def read_file(self, directory, filename):
        dir_path = os.path.join(self.root_directory, directory) if directory else self.root_directory
        filepath = os.path.join(dir_path, filename)
        try:
            with open(filepath, 'r') as f:
                content = f.read()
            print(f"Content of '{filename}' in '{dir_path}':\n{content}")
            return content
        except FileNotFoundError:
            print(f"File '{filename}' not found in '{dir_path}'.")
            return None
    
    def update_file(self, directory, filename, new_content):
        dir_path = os.path.join(self.root_directory, directory) if directory else self.root_directory
        filepath = os.path.join(dir_path, filename)
        if os.path.exists(filepath):
            with open(filepath, 'a') as f:
                f.write(new_content)
            print(f"File '{filename}' updated in '{dir_path}'.")
        else:
            print(f"File '{filename}' does not exist in '{dir_path}'.")
    
    def delete_file(self, directory, filename):
        dir_path = os.path.join(self.root_directory, directory) if directory else self.root_directory
        filepath = os.path.join(dir_path, filename)
        try:
            os.remove(filepath)
            print(f"File '{filename}' deleted from '{dir_path}'.")
        except FileNotFoundError:
            print(f"File '{filename}' not found in '{dir_path}'.")
    
    def list_files(self, directory=""):
        # List files in the given directory; if none is provided, list in root
        dir_path = os.path.join(self.root_directory, directory) if directory else self.root_directory
        files = [f for f in os.listdir(dir_path)
                 if os.path.isfile(os.path.join(dir_path, f))]
        print(f"Files in '{dir_path}': {files}")
        return files

# Interactive demonstration of the FileManager with directory support
def interactive_file_manager():
    root_dir = "distributed_fs"
    fm = FileManager(root_dir)
    
    while True:
        print("\nOptions:")
        print("1: Create directory")
        print("2: List directories")
        print("3: Delete directory")
        print("4: Create file")
        print("5: Read file")
        print("6: Update file")
        print("7: Delete file")
        print("8: List files")
        print("9: Exit")
        choice = input("Enter your choice (1-9): ")
        
        if choice == "1":
            dirname = input("Enter directory name to create: ")
            fm.create_directory(dirname)
        elif choice == "2":
            fm.list_directories()
        elif choice == "3":
            dirname = input("Enter directory name to delete: ")
            fm.delete_directory(dirname)
        elif choice == "4":
            dirname = input("Enter directory (leave blank for root): ")
            filename = input("Enter filename to create: ")
            content = input("Enter content for the file: ")
            fm.create_file(dirname, filename, content)
        elif choice == "5":
            dirname = input("Enter directory (leave blank for root): ")
            filename = input("Enter filename to read: ")
            fm.read_file(dirname, filename)
        elif choice == "6":
            dirname = input("Enter directory (leave blank for root): ")
            filename = input("Enter filename to update: ")
            new_content = input("Enter content to append: ")
            fm.update_file(dirname, filename, new_content)
        elif choice == "7":
            dirname = input("Enter directory (leave blank for root): ")
            filename = input("Enter filename to delete: ")
            fm.delete_file(dirname, filename)
        elif choice == "8":
            dirname = input("Enter directory (leave blank for root): ")
            fm.list_files(dirname)
        elif choice == "9":
            print("Exiting interactive session.")
            break
        else:
            print("Invalid choice. Please select a valid option.")

# Uncomment the next line to run the interactive file manager:
interactive_file_manager()
